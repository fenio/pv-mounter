name: test
permissions:
  contents: read
on:
  push:
    branches:
      - '*'
  pull_request:
    branches:
      - main

# test again

jobs:
  test:
    runs-on: ubuntu-24.04

    steps:

#      - name: Harden the runner (Audit all outbound calls)
#        uses: step-security/harden-runner@4d991eb9b905ef189e4c376166672c3f2f230481 # v2.11.0
#        with:
#          egress-policy: audit

      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Set up Go
        uses: actions/setup-go@0aaccfd150d50ccaeb58ebd88d36e91967a5f35b # v5.4.0
        with:
          go-version: '1.24.1'
          cache: false

      - uses: actions/cache@d4323d4df104b026a6aa633fdb11d772146be0bf # v4.2.2
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Run tests with coverage
        run: |
          go test -v -coverprofile=coverage.out ./... 

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@0565863a31f2c772f9f0395002a31e3f06189574 # v5.4.0
        with:
          files: ./coverage.out
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: Start minikube
        id: minikube
        uses: medyagh/setup-minikube@cea33675329b799adccc9526aa5daccc26cd5052 # v0.0.19
        with:
          cpus: 4
          memory: 6000m

      - name: Create test PVCs and PODs
        run: kubectl apply -f test

      - name: Install SSHFS
        uses: awalsh128/cache-apt-pkgs-action@5902b33ae29014e6ca012c5d8025d4346556bd40 # v1.4.3
        with: 
          packages: sshfs openssh-client libfuse3-3

      - name: Build pv-mounter
        run: make bin

      - name: Create mountpoint
        run: mkdir foo

      - name: Check state of test objects 
        run: |
          kubectl get pod 
          kubectl get pvc
          kubectl get storageclass

      - name: Wait for 1st PVC to be ready
        run: |
          kubectl wait --for=jsonpath='{.status.phase}'=Bound pvc/pvc-1

      - name: '[TEST] PVC with RWX access mode'
        run: |
          ./bin/pv-mounter mount default pvc-1 foo
          touch foo/bar
          ls -l foo/bar
          ./bin/pv-mounter clean default pvc-1 foo

      - name: '[TEST] Unmounted PVC with RWO access mode'
        run: |
          ./bin/pv-mounter mount default pvc-2 foo
          touch foo/bar
          ls -l foo/bar
          ./bin/pv-mounter clean default pvc-2 foo

      - name: '[TEST] Mounted PVC with RWO access mode' 
        run: |
          ./bin/pv-mounter mount --needs-root default pvc-3 foo
          touch foo/bar
          ls -l foo/bar
          ./bin/pv-mounter clean default pvc-3 foo

      - name: '[TEST] PVC with RWX access mode (NEEDS_ROOT)'
        run: |
          ./bin/pv-mounter mount --needs-root default pvc-4 foo
          touch foo/bar
          ls -l foo/bar
          ./bin/pv-mounter clean default pvc-4 foo

      - name: '[TEST] Unmounted PVC with RWO access mode (NEEDS_ROOT)'
        run: |
          ./bin/pv-mounter mount default pvc-5 foo
          touch foo/bar
          ls -l foo/bar
          ./bin/pv-mounter clean default pvc-5 foo

      - name: '[TEST] Mounted PVC with RWO access mode (NEEDS_ROOT)'
        run: |
          ./bin/pv-mounter mount --needs-root default pvc-6 foo
          touch foo/bar
          ls -l foo/bar
          ./bin/pv-mounter clean default pvc-6 foo

      - name: Delete PODs and PVCs
        run: kubectl delete -f test --force --grace-period=0


