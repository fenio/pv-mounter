name: test
permissions:
  contents: read
on:
  push:
    branches:
      - '*'
  pull_request:
    branches:
      - main

# test again

jobs:
  test:
    strategy:
      matrix:
        arch: [amd64, arm64]
    runs-on: ${{ matrix.arch == 'arm64' && 'ubuntu-24.04-arm' || 'ubuntu-24.04' }}

    steps:

#      - name: Harden the runner (Audit all outbound calls)
#        uses: step-security/harden-runner@4d991eb9b905ef189e4c376166672c3f2f230481 # v2.11.0
#        with:
#          egress-policy: audit

      - name: Checkout code
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4.3.0

      - name: Set up Go
        uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5.5.0
        with:
          go-version: '1.24.6'
          cache: false

      - uses: actions/cache@0400d5f644dc74513175e3cd8d07132dd4860809 # v4.2.4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Run tests with coverage
        run: |
          go test -v -coverprofile=coverage.out ./...

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@18283e04ce6e62d37312384ff67231eb8fd56d24 # v5.4.3
        with:
          files: ./coverage.out
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: Start minikube
        id: minikube
        uses: medyagh/setup-minikube@e3c7f79eb1e997eabccc536a6cf318a2b0fe19d9 # v0.0.20
        with:
          cpus: 4
          memory: 6000m

      - name: Create test PVCs and PODs
        run: kubectl apply -f test

      - name: Install SSHFS
        uses: awalsh128/cache-apt-pkgs-action@2c09a5e66da6c8016428a2172bd76e5e4f14bb17 # v1.5.3
        with:
          packages: sshfs openssh-client libfuse3-3
          version: ${{ runner.arch }}-1.0

      - name: Build pv-mounter
        run: make bin

      - name: Create mountpoint
        run: mkdir foo

      - name: Check state of test objects
        run: |
          kubectl get pod
          kubectl get pvc
          kubectl get storageclass

      - name: Wait for 1st PVC to be ready
        run: |
          kubectl wait --for=jsonpath='{.status.phase}'=Bound pvc/pvc-1

      - name: '[TEST] PVC with RWX access mode'
        run: |
          ./bin/pv-mounter mount default pvc-1 foo
          touch foo/bar
          ls -l foo/bar
          ./bin/pv-mounter clean default pvc-1 foo

      - name: '[TEST] Unmounted PVC with RWO access mode'
        run: |
          ./bin/pv-mounter mount default pvc-2 foo
          touch foo/bar
          ls -l foo/bar
          ./bin/pv-mounter clean default pvc-2 foo

      - name: '[TEST] Mounted PVC with RWO access mode'
        run: |
          ./bin/pv-mounter mount --needs-root default pvc-3 foo
          touch foo/bar
          ls -l foo/bar
          ./bin/pv-mounter clean default pvc-3 foo

      - name: '[TEST] PVC with RWX access mode (NEEDS_ROOT)'
        run: |
          ./bin/pv-mounter mount --needs-root default pvc-4 foo
          touch foo/bar
          ls -l foo/bar
          ./bin/pv-mounter clean default pvc-4 foo

      - name: '[TEST] Unmounted PVC with RWO access mode (NEEDS_ROOT)'
        run: |
          ./bin/pv-mounter mount default pvc-5 foo
          touch foo/bar
          ls -l foo/bar
          ./bin/pv-mounter clean default pvc-5 foo

      - name: '[TEST] Mounted PVC with RWO access mode (NEEDS_ROOT)'
        run: |
          ./bin/pv-mounter mount --needs-root default pvc-6 foo
          touch foo/bar
          ls -l foo/bar
          ./bin/pv-mounter clean default pvc-6 foo

      - name: Delete PODs and PVCs
        run: kubectl delete -f test --force --grace-period=0
