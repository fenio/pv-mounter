name: vhs

on:
  push:
    branches: [main]
    paths:
      - 'demo/**/*.tape'
      - 'cmd/**'
      - 'pkg/**'
  pull_request:
    paths:
      - 'demo/**/*.tape'
      - 'cmd/**'
      - 'pkg/**'
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write

jobs:
  generate-gifs:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          fetch-depth: 0

      - name: Setup KubeSolo
        uses: fenio/setup-kubesolo@2d8767179f8fa5b56749e071485c375378a84d21 # v2
        env:
          KUBESOLO_LOCAL_STORAGE: true

      - name: Setup Krew
        uses: fenio/setup-krew@c93fbdbdf704bcf87c6a1002e20fe7a8f3eafc4d # v1
        with:
          plugins: 'pv-mounter'

      - name: Enable shared volumes
        run: |
          echo "⏳ Waiting for namespace local-path-storage..."
          until kubectl get ns "local-path-storage" >/dev/null 2>&1; do
            sleep 2
          done
          echo "✅ Namespace local-path-storage exists."
          
          echo "⏳ Waiting for ConfigMap local-path-config in namespace local-path-storage..."
          until kubectl get cm "local-path-config" -n "local-path-storage" >/dev/null 2>&1; do
            sleep 2
          done
          echo "✅ ConfigMap local-path-config found, patching..."
          kubectl patch cm local-path-config -n local-path-storage \
          --type merge \
          -p '{"data":{"config.json":"{\n  \"sharedFileSystemPath\": \"/opt/local-path-provisioner\"\n}"}}'

      - name: Test pv-mounter
        run: |
          kubectl pv-mounter --help

      - name: Install VHS and dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y ffmpeg ttyd zsh
          wget https://github.com/charmbracelet/vhs/releases/download/v0.10.0/vhs_0.10.0_amd64.deb
          sudo dpkg -i vhs_0.10.0_amd64.deb

      - name: Create test PVCs and pods
        run: |
          # Create namespace
          kubectl create namespace demo
          
          # Apply test resources
          kubectl apply -f test/1-pvc.yaml -n demo
          kubectl apply -f test/2-pvc.yaml -n demo
          
          # Wait for PVCs to be bound
          kubectl wait --for=jsonpath='{.status.phase}'=Bound pvc/pvc-1 -n demo --timeout=120s || true
          kubectl wait --for=jsonpath='{.status.phase}'=Bound pvc/pvc-2 -n demo --timeout=120s || true
          
          kubectl describe pvc pvc-1 -n demo
          kubectl describe pvc pvc-2 -n demo
         
          # Create mount point
          mkdir -p foo
          
      - name: 🧪 Generate the gif with vhs
        run: |
          vhs demo/unmounted.tape

      - name: Upload GIF artifacts
        uses: actions/upload-artifact@330a01c490aca151604b8cf639adc76d48f6c5d4 # v5.0.0
        with:
          name: demo-gifs
          path: '*.gif'
          retention-days: 90

      - name: Commit updated GIFs
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add *.gif
          if git diff --quiet --staged; then
            echo "No changes to commit"
          else
            git commit -m "chore: update demo GIFs [skip ci]"
            git push
          fi
